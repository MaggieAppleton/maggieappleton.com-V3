---
import { Icon } from "astro-icon/components";
import type { MarkdownHeading } from "astro";

interface Props {
	headings: MarkdownHeading[];
}

const { headings } = Astro.props;
---

<div class="desktop-container">
	<div class="title">
		<svg width="8" height="8">
			<circle r="4" cx="4" cy="4" fill="var(--color-sea-blue)"></circle>
		</svg>
		<h4>Table of Contents</h4>
	</div>

	<nav class="toc">
		<ul>
			{
				headings
					.filter(({ depth }) => depth > 1 && depth < 4)
					.map((heading) => (
						<li class="toc-item" data-level={heading.depth}>
							<a href={`#${heading.slug}`} class="toc-link">
								{heading.text}
							</a>
						</li>
					))
			}
		</ul>
	</nav>
</div>

<div class="mobile-container">
	<div class="collapse-header">
		<Icon name="heroicons:chevron-right" size={18} class="arrow-icon" />
		<h4>Table of Contents</h4>
	</div>
	<div class="collapse-content">
		<nav class="toc">
			<ul>
				{
					headings
						.filter(({ depth }) => depth > 1 && depth < 4)
						.map((heading) => (
							<li class="toc-item" data-level={heading.depth}>
								<a href={`#${heading.slug}`} class="toc-link">
									{heading.text}
								</a>
							</li>
						))
				}
			</ul>
		</nav>
	</div>
</div>

<style>
	.arrow-icon.expanded {
		transform: rotate(90deg);
	}

	.collapse-header {
		cursor: pointer;
		display: flex;
		align-items: center;
		gap: 0.5rem;
		border-bottom: 1px solid var(--color-gray-100);
		padding-bottom: var(--space-xs);
	}

	.collapse-header .arrow-icon {
		color: var(--color-sea-blue);
		transition: all 0.3s cubic-bezier(0.2, 1, 0.8, 1);
	}

	.collapse-header h4 {
		display: inline-block;
		margin: 0;
		font-size: 0.96rem;
		color: var(--color-gray-800);
		font-weight: 600;
		transition: all 0.3s cubic-bezier(0.2, 1, 0.8, 1);
	}

	.collapse-header:hover h4 {
		color: var(--color-medium-sea-blue);
	}

	.collapse-header:hover .arrow-icon {
		fill: var(--color-medium-sea-blue);
	}

	.collapse-content {
		padding-bottom: var(--space-xs);
		margin-bottom: var(--space-s);
		border-bottom: 1px solid var(--color-gray-100);
		display: none;
	}

	.collapse-content.expanded {
		display: block;
	}

	.mobile-container {
		display: none;
	}

	@media (max-width: 1280px) {
		.mobile-container {
			display: block;
			margin-bottom: var(--space-xs);
		}
	}

	.desktop-container {
		grid-column: 3;
		height: 0;
		max-width: 300px;
		margin-left: var(--space-xl);
		position: sticky;
		top: 32px;
	}

	@media (max-width: 1280px) {
		.desktop-container {
			display: none;
		}
	}

	.desktop-container h4 {
		margin: 0;
		font-size: 0.96rem;
		color: var(--color-gray-800);
		transition: all 0.3s cubic-bezier(0.2, 1, 0.8, 1);
	}

	@media (max-width: 1280px) {
		.desktop-container {
			display: none;
		}
	}

	.title {
		display: flex;
		gap: 0.85rem;
		align-items: center;
		margin-top: 0.5rem;
	}

	.toc {
		margin-top: var(--space-s);
	}

	.toc ul {
		list-style: none;
		padding: 0;
		margin: 0;
	}

	li.toc-item {
		margin-left: 22px !important;
	}

	.toc-item::before {
		display: none !important;
	}

	.toc-link {
		font-family: var(--font-sans);
		display: block;
		line-height: var(--leading-base);
		font-size: var(--font-size-sm);
		cursor: pointer;
		transition: all 0.3s cubic-bezier(0.2, 1, 0.8, 1);
		color: var(--color-gray-600);
		text-decoration: none;
		margin-top: 0.75rem;
	}

	.toc-item[data-level="1"] .toc-link,
	.toc-item[data-level="2"] .toc-link {
		margin-left: 0;
	}

	.toc-item[data-level="3"] .toc-link,
	.toc-item[data-level="4"] .toc-link {
		margin-left: 24px;
	}

	.toc-link:hover {
		color: var(--color-medium-sea-blue);
	}

	.toc-link.active {
		color: var(--color-sea-blue);
		font-weight: 500;
	}
</style>

<script>
	const header = document.querySelector(".collapse-header");
	const content = document.querySelector(".collapse-content");
	const arrow = document.querySelector(".arrow-icon");

	header?.addEventListener("click", () => {
		content?.classList.toggle("expanded");
		arrow?.classList.toggle("expanded");
	});

	// Smooth scrolling for TOC links
	document.querySelectorAll(".toc-link").forEach((link) => {
		link.addEventListener("click", (e) => {
			e.preventDefault();
			const targetId = link.getAttribute("href")?.slice(1);
			if (!targetId) return;

			const targetElement = document.getElementById(targetId);
			if (!targetElement) return;

			// Scroll to the target element
			targetElement.scrollIntoView({
				behavior: "smooth",
				block: "start",
			});

			// Update URL without causing another scroll
			history.pushState(null, "", `#${targetId}`);
		});
	});
</script>
