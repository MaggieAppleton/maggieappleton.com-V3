---
import type { CollectionEntry } from "astro:content";
import { Icon } from "astro-icon/components";
import { getVersionInfo, hasMultipleVersions, getVersionFromEntry } from "../../utils/versionUtils";
import { getCollection } from "astro:content";

type VersionedContent =
	| CollectionEntry<"essays">
	| CollectionEntry<"notes">
	| CollectionEntry<"patterns">
	| CollectionEntry<"talks">;

interface Props {
	entry: VersionedContent;
}

const { entry } = Astro.props;

// Get all entries of the same collection type to find versions
let allEntries: VersionedContent[] = [];
switch (entry.collection) {
	case "essays":
		allEntries = (await getCollection("essays")) as VersionedContent[];
		break;
	case "notes":
		allEntries = (await getCollection("notes")) as VersionedContent[];
		break;
	case "patterns":
		allEntries = (await getCollection("patterns")) as VersionedContent[];
		break;
	case "talks":
		allEntries = (await getCollection("talks")) as VersionedContent[];
		break;
}

const versionInfo = getVersionInfo(entry, allEntries);
const multipleVersions = hasMultipleVersions(versionInfo.baseSlug, allEntries);

const latestUrl = `/${versionInfo.baseSlug}`;
const isArchived = !versionInfo.isLatest;
---

{
	multipleVersions && isArchived && (
		<div class="version-navigation archived">
			<div class="bar">
				<div class="message">
					<Icon name="heroicons:exclamation-triangle" size={18} class="warning-icon" />
					<span class="message-text">
						This is an older version of this {entry.collection.slice(0, -1)}. Read the latest version updated
						on {versionInfo.allVersions[versionInfo.allVersions.length - 1].data.updated
							? new Date(versionInfo.allVersions[versionInfo.allVersions.length - 1].data.updated instanceof Date 
								? versionInfo.allVersions[versionInfo.allVersions.length - 1].data.updated.toISOString() 
								: versionInfo.allVersions[versionInfo.allVersions.length - 1].data.updated).toLocaleDateString('en-US', { 
									year: 'numeric', 
									month: 'long', 
									day: 'numeric' 
								})
							: ''}
					</span>
				</div>
				<a href={latestUrl} class="view-latest-btn">
					View latest â†’
				</a>
			</div>
		</div>
	)
}

<style>
	.version-navigation {
		border: 1px solid var(--color-tinted-cream);
		border-radius: var(--border-radius-base);
		background: var(--color-light-cream);
		padding: var(--space-xs) var(--space-s);
		margin: var(--space-m) 0;
		font-family: var(--font-sans);
	}

	.version-navigation.archived {
		background: #fdf2f8;
		border: 1px solid #fecaca;
		padding: var(--space-s) var(--space-s);
	}

	.bar {
		display: flex;
		justify-content: space-between;
		align-items: center;
		gap: var(--space-s);
	}

	.message {
		display: flex;
		align-items: flex-start;
		gap: var(--space-xs);
		flex: 1;
	}

	.warning-icon {
		color: #dc2626;
		flex-shrink: 0;
		margin-top: 2px;
	}

	.message-text {
		font-size: var(--font-size-xs);
		color: var(--color-gray-800);
		line-height: var(--leading-snug);
	}

	.view-latest-btn {
		font-size: var(--font-size-xs);
		color: var(--color-sea-blue);
		text-decoration: none;
		font-weight: 600;
		flex-shrink: 0;
		padding: var(--space-4) var(--space-8);
		border-radius: var(--border-radius-sm);
		transition: background-color 0.2s ease;
	}

	.view-latest-btn:hover {
		background: rgba(4, 165, 187, 0.1);
		text-decoration: none;
	}

	.small {
		font-size: var(--font-size-xs);
		color: var(--color-gray-700);
	}

	.inline-nav {
		display: inline-flex;
		align-items: center;
		gap: var(--space-xs);
		font-size: var(--font-size-xs);
	}

	.link {
		color: var(--color-sea-blue);
		text-decoration: none;
	}

	.link:hover {
		text-decoration: underline;
	}

	.muted {
		color: var(--color-gray-400);
	}

	.divider {
		color: var(--color-gray-300);
	}

	.history {
		margin-top: var(--space-xs);
	}

	.summary {
		list-style: none;
		font-size: var(--font-size-xs);
		color: var(--color-gray-600);
		cursor: pointer;
	}

	.summary::-webkit-details-marker {
		display: none;
	}

	.history-list {
		list-style: none;
		padding: 0;
		margin: var(--space-xs) 0 0 0;
		display: grid;
		gap: var(--space-2xs);
	}

	.history-item {
		margin: 0;
	}

	.history-link {
		display: grid;
		grid-template-columns: auto 1fr;
		align-items: baseline;
		gap: var(--space-xs);
		padding: var(--space-2xs) 0;
		text-decoration: none;
		color: inherit;
	}

	.badge {
		font-family: var(--font-sans);
		font-size: var(--font-size-xs);
		color: var(--color-gray-700);
		white-space: nowrap;
	}

	.history-item.current .badge {
		color: var(--color-sea-blue);
	}

	.summary-text {
		font-size: var(--font-size-xs);
		color: var(--color-gray-600);
	}

	@media (max-width: 768px) {
		.bar {
			flex-direction: column;
			align-items: flex-start;
			gap: var(--space-xs);
		}

		.view-latest-btn {
			align-self: flex-start;
			margin-top: var(--space-xs);
		}
	}
</style>
