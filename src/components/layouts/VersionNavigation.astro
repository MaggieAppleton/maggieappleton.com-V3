---
import type { CollectionEntry } from "astro:content";
import { Icon } from "astro-icon/components";
import { getVersionInfo, hasMultipleVersions, getVersionFromEntry } from "../../utils/versionUtils";
import { getCollection } from "astro:content";

type VersionedContent =
	| CollectionEntry<"essays">
	| CollectionEntry<"notes">
	| CollectionEntry<"patterns">
	| CollectionEntry<"talks">;

interface Props {
	entry: VersionedContent;
}

const { entry } = Astro.props;

// Get all entries of the same collection type to find versions
let allEntries: VersionedContent[] = [];
switch (entry.collection) {
	case "essays":
		allEntries = (await getCollection("essays")) as VersionedContent[];
		break;
	case "notes":
		allEntries = (await getCollection("notes")) as VersionedContent[];
		break;
	case "patterns":
		allEntries = (await getCollection("patterns")) as VersionedContent[];
		break;
	case "talks":
		allEntries = (await getCollection("talks")) as VersionedContent[];
		break;
}

const versionInfo = getVersionInfo(entry, allEntries);
const multipleVersions = hasMultipleVersions(versionInfo.baseSlug, allEntries);

// Initialize variables for all cases
const currentVersion = versionInfo.version;
const totalVersions = versionInfo.allVersions.length;

// Get previous and next versions
const currentIndex = versionInfo.allVersions.findIndex(
	(v) => getVersionFromEntry(v) === currentVersion,
);
const prevVersion = currentIndex > 0 ? versionInfo.allVersions[currentIndex - 1] : null;
const nextVersion =
	currentIndex < totalVersions - 1 ? versionInfo.allVersions[currentIndex + 1] : null;

// Generate URLs
const getVersionUrl = (version: VersionedContent) => {
	const versionNum = getVersionFromEntry(version);
	const latestVersionNum = getVersionFromEntry(
		versionInfo.allVersions[versionInfo.allVersions.length - 1],
	);
	return versionNum === latestVersionNum
		? `/${versionInfo.baseSlug}`
		: `/v${versionNum}/${versionInfo.baseSlug}`;
};

const latestUrl = `/${versionInfo.baseSlug}`;
const lastUpdated =
	entry.data.updated instanceof Date ? entry.data.updated : new Date(entry.data.updated);
const isArchived = !versionInfo.isLatest;
---

{
	multipleVersions && (
		<div class={`version-navigation ${isArchived ? "archived" : ""}`}>
			<div class="bar">
				<span class="small">
					{isArchived ? (
						<>
							Older version v{currentVersion} of {totalVersions} ·{" "}
							<a href={latestUrl} class="link">
								View latest
							</a>
						</>
					) : (
						<>
							Version v{currentVersion} of {totalVersions}
						</>
					)}
				</span>
				<nav class="inline-nav">
					{prevVersion ? (
						<a href={getVersionUrl(prevVersion)} class="link">
							<Icon name="heroicons:chevron-left" size={14} /> v{getVersionFromEntry(prevVersion)}
						</a>
					) : (
						<span class="muted">
							<Icon name="heroicons:chevron-left" size={14} /> v{currentVersion}
						</span>
					)}
					<span class="divider">·</span>
					{nextVersion ? (
						<a href={getVersionUrl(nextVersion)} class="link">
							v{getVersionFromEntry(nextVersion)} <Icon name="heroicons:chevron-right" size={14} />
						</a>
					) : (
						<span class="muted">
							Latest <Icon name="heroicons:chevron-right" size={14} />
						</span>
					)}
				</nav>
			</div>
			<details class="history">
				<summary class="summary">Version history</summary>
				<ul class="history-list">
					{versionInfo.allVersions
						.slice()
						.reverse()
						.map((version) => {
							const versionNum = getVersionFromEntry(version);
							const isCurrentVersion = versionNum === currentVersion;
							const versionUrl = getVersionUrl(version);
							const isLatestVersion =
								version === versionInfo.allVersions[versionInfo.allVersions.length - 1];
							return (
								<li class={`history-item ${isCurrentVersion ? "current" : ""}`}>
									<a href={versionUrl} class="history-link">
										<span class="badge">
											v{versionNum}
											{isLatestVersion ? " · current" : ""}
										</span>
										{version.data.versionSummary && (
											<span class="summary-text">{version.data.versionSummary}</span>
										)}
									</a>
								</li>
							);
						})}
				</ul>
			</details>
		</div>
	)
}

<!-- no JS needed; using native details/summary -->

<style>
	.version-navigation {
		border: 1px solid var(--color-tinted-cream);
		border-radius: var(--border-radius-base);
		background: var(--color-light-cream);
		padding: var(--space-xs) var(--space-s);
		margin: var(--space-m) 0;
		font-family: var(--font-sans);
	}

	.version-navigation.archived {
		background: var(--color-cream);
	}

	.bar {
		display: flex;
		justify-content: space-between;
		align-items: center;
		gap: var(--space-s);
	}

	.small {
		font-size: var(--font-size-xs);
		color: var(--color-gray-700);
	}

	.inline-nav {
		display: inline-flex;
		align-items: center;
		gap: var(--space-xs);
		font-size: var(--font-size-xs);
	}

	.link {
		color: var(--color-sea-blue);
		text-decoration: none;
	}

	.link:hover {
		text-decoration: underline;
	}

	.muted {
		color: var(--color-gray-400);
	}

	.divider {
		color: var(--color-gray-300);
	}

	.history {
		margin-top: var(--space-xs);
	}

	.summary {
		list-style: none;
		font-size: var(--font-size-xs);
		color: var(--color-gray-600);
		cursor: pointer;
	}

	.summary::-webkit-details-marker {
		display: none;
	}

	.history-list {
		list-style: none;
		padding: 0;
		margin: var(--space-xs) 0 0 0;
		display: grid;
		gap: var(--space-2xs);
	}

	.history-item {
		margin: 0;
	}

	.history-link {
		display: grid;
		grid-template-columns: auto 1fr;
		align-items: baseline;
		gap: var(--space-xs);
		padding: var(--space-2xs) 0;
		text-decoration: none;
		color: inherit;
	}

	.badge {
		font-family: var(--font-sans);
		font-size: var(--font-size-xs);
		color: var(--color-gray-700);
		white-space: nowrap;
	}

	.history-item.current .badge {
		color: var(--color-sea-blue);
	}

	.summary-text {
		font-size: var(--font-size-xs);
		color: var(--color-gray-600);
	}

	@media (max-width: 768px) {
		.bar {
			flex-direction: column;
			align-items: flex-start;
			gap: var(--space-2xs);
		}
	}
</style>
