---
import { Icon } from "astro-icon/components";
---

<div class="due-date-container">
	<div class="due-date-heading">
		<h2>Enter Your Due Date</h2>
	</div>
	<div class="input-container">
		<label for="due-date">Due Date</label>
		<input type="date" id="due-date" class="due-date-input" pattern="\d{4}-\d{2}-\d{2}" required />
		<button id="calculate-button" class="calculate-button">
			<Icon name="heroicons:calculator" size={20} />
			Calculate Probabilities
		</button>
	</div>

	<div class="first-time-option">
		<input type="checkbox" id="first-time-mother" name="first-time-mother" />
		<label for="first-time-mother">I'm a first-time mother</label>
		<div class="info-tooltip">
			<Icon name="heroicons:information-circle" size={18} />
			<span class="tooltip-text">First-time mothers typically have longer pregnancies</span>
		</div>
	</div>

	<div class="pregnancy-info">
		<div class="info-item">
			<div class="info-label">Current Week</div>
			<div id="current-week" class="info-value">--</div>
		</div>
		<div class="info-item">
			<div class="info-label">Days Until Due Date</div>
			<div id="days-until-due" class="info-value">--</div>
		</div>
	</div>
</div>

<style>
	.due-date-container {
		width: 100%;
		background-color: #f9fafb;
		border-radius: 0.5rem;
		padding: 1.5rem;
		margin-bottom: 1.5rem;
		box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);
	}

	.due-date-heading {
		margin-bottom: 1.5rem;
	}

	h2 {
		font-size: 1.75rem;
		margin: 0;
		color: #111827;
		font-weight: 600;
	}

	.input-container {
		display: flex;
		flex-wrap: wrap;
		gap: 1rem;
		margin-bottom: 1.5rem;
		align-items: flex-end;
	}

	label {
		display: block;
		font-size: 0.875rem;
		font-weight: 500;
		margin-bottom: 0.5rem;
		color: #4b5563;
	}

	.due-date-input {
		flex: 1;
		min-width: 200px;
		padding: 0.75rem 1rem;
		border: 1px solid #e5e7eb;
		border-radius: 0.375rem;
		background-color: white;
		font-size: 1rem;
		color: #1f2937;
	}

	.calculate-button {
		background-color: #4f46e5;
		color: white;
		font-weight: 500;
		padding: 0.75rem 1.5rem;
		border: none;
		border-radius: 0.375rem;
		cursor: pointer;
		display: flex;
		align-items: center;
		gap: 0.5rem;
		transition: background-color 0.2s;
	}

	.calculate-button:hover {
		background-color: #4338ca;
	}

	.first-time-option {
		display: flex;
		align-items: center;
		margin-bottom: 1.5rem;
		gap: 0.5rem;
	}

	#first-time-mother {
		cursor: pointer;
	}

	.info-tooltip {
		position: relative;
		display: inline-flex;
		color: #6b7280;
		cursor: help;
	}

	.tooltip-text {
		visibility: hidden;
		position: absolute;
		left: 50%;
		transform: translateX(-50%);
		bottom: 100%;
		background-color: #1f2937;
		color: white;
		text-align: center;
		padding: 5px 10px;
		border-radius: 4px;
		width: 220px;
		font-size: 0.75rem;
		opacity: 0;
		transition: opacity 0.2s;
		pointer-events: none;
		white-space: normal;
		margin-bottom: 5px;
		z-index: 1;
	}

	.info-tooltip:hover .tooltip-text {
		visibility: visible;
		opacity: 1;
	}

	.pregnancy-info {
		display: flex;
		flex-wrap: wrap;
		gap: 2rem;
	}

	.info-item {
		flex: 1;
		min-width: 150px;
	}

	.info-label {
		font-size: 0.875rem;
		color: #6b7280;
		margin-bottom: 0.25rem;
	}

	.info-value {
		font-size: 1.25rem;
		font-weight: 700;
		color: #111827;
	}

	@media (max-width: 640px) {
		.input-container {
			flex-direction: column;
			align-items: stretch;
		}

		.due-date-input {
			width: 100%;
		}

		.calculate-button {
			width: 100%;
			justify-content: center;
		}
	}
</style>

<script>
	// Calculate and display pregnancy information
	function calculatePregnancyInfo(dueDate: Date): {
		currentWeek: number;
		currentDay: number;
		daysUntilDue: number;
	} {
		const today = new Date();
		const daysInMilliseconds = 24 * 60 * 60 * 1000;

		// Calculate days until due date
		const daysUntilDue = Math.round((dueDate.getTime() - today.getTime()) / daysInMilliseconds);

		// A full-term pregnancy is 40 weeks (280 days)
		// If daysUntilDue is 0, we're at exactly 40 weeks
		// If daysUntilDue is negative, we've passed the due date
		const daysFromConception = 280 - daysUntilDue;

		// Calculate weeks and days
		const currentWeek = Math.floor(daysFromConception / 7);
		const currentDay = daysFromConception % 7;

		return {
			currentWeek,
			currentDay,
			daysUntilDue,
		};
	}

	function formatWeek(week: number, day: number): string {
		return `${week} weeks, ${day} days`;
	}

	function formatDaysUntil(days: number): string {
		if (days === 0) return "Today!";
		if (days < 0) return `${Math.abs(days)} days overdue`;
		return `${days} days`;
	}

	// Get references to elements
	const dueDateInput = document.getElementById("due-date") as HTMLInputElement;
	const calculateButton = document.getElementById("calculate-button");
	const currentWeekElement = document.getElementById("current-week");
	const daysUntilDueElement = document.getElementById("days-until-due");
	const firstTimeMotherCheckbox = document.getElementById("first-time-mother") as HTMLInputElement;

	// Set default due date (2 weeks from today)
	const defaultDueDate = new Date();
	defaultDueDate.setDate(defaultDueDate.getDate() + 14);

	// Format for input (YYYY-MM-DD)
	const year = defaultDueDate.getFullYear();
	const month = String(defaultDueDate.getMonth() + 1).padStart(2, "0");
	const day = String(defaultDueDate.getDate()).padStart(2, "0");
	dueDateInput.value = `${year}-${month}-${day}`;

	// Calculate and display initial pregnancy information
	const initialDueDate = new Date(dueDateInput.value);
	const initialInfo = calculatePregnancyInfo(initialDueDate);

	if (currentWeekElement)
		currentWeekElement.textContent = formatWeek(initialInfo.currentWeek, initialInfo.currentDay);
	if (daysUntilDueElement)
		daysUntilDueElement.textContent = formatDaysUntil(initialInfo.daysUntilDue);

	// Handle calculate button click
	calculateButton?.addEventListener("click", () => {
		const inputDate = dueDateInput.value;
		if (!inputDate) return;

		const dueDate = new Date(inputDate);
		const info = calculatePregnancyInfo(dueDate);

		// Update pregnancy information display
		if (currentWeekElement)
			currentWeekElement.textContent = formatWeek(info.currentWeek, info.currentDay);
		if (daysUntilDueElement) daysUntilDueElement.textContent = formatDaysUntil(info.daysUntilDue);

		// Dispatch event with pregnancy information
		const event = new CustomEvent("pregnancy-data-update", {
			detail: {
				dueDate,
				currentWeek: info.currentWeek,
				currentDay: info.currentDay,
				daysUntilDue: info.daysUntilDue,
				isFirstTimeMother: firstTimeMotherCheckbox.checked,
			},
		});

		document.dispatchEvent(event);
	});

	// Update when first-time status changes (only if calculate has been used before)
	firstTimeMotherCheckbox?.addEventListener("change", () => {
		if (currentWeekElement?.textContent !== "--") {
			calculateButton?.click();
		}
	});

	// Automatically trigger the calculate button on page load to show consistent data
	// Using setTimeout to ensure all DOM elements are properly loaded
	setTimeout(() => {
		calculateButton?.click();
	}, 100);
</script>
