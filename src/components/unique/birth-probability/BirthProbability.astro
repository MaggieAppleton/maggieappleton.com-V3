---
import { Icon } from "astro-icon/components";
import ProbabilityChart from "./ProbabilityChart.astro";

// Import CSV data
import birthProbsCSV from "./birthprobs-multiparous.csv?raw";
import firstTimeProbsCSV from "./birthprobs-firsttime.csv?raw";

// Normalize CSV text by ensuring consistent line endings and trimming
function normalizeCSV(csvText: string): string {
	// Replace all \r\n with \n, then replace any remaining \r with \n
	return csvText.replace(/\r\n/g, "\n").replace(/\r/g, "\n").trim();
}

// Parse CSV function with robust handling of different formats
function parseCSV(csvText: string): Record<string, string>[] {
	// Normalize the CSV content first
	const normalizedCSV = normalizeCSV(csvText);

	// Split by lines, ensuring consistent line breaks
	const lines = normalizedCSV.split("\n");

	if (lines.length < 2) {
		console.error("CSV has insufficient lines:", lines);
		return [];
	}

	// Parse headers, trim each one to remove any whitespace
	const headerLine = lines[0];
	const headers = headerLine.split(",").map((h: string) => h.trim());

	// Process each data line
	const result: Record<string, string>[] = [];
	for (let i = 1; i < lines.length; i++) {
		const line = lines[i].trim();
		if (!line) continue; // Skip empty lines

		const values = line.split(",").map((v: string) => v.trim());
		const entry: Record<string, string> = {};

		// Map each value to its header
		headers.forEach((header: string, index: number) => {
			// Use the empty string as key for the first column if header is empty
			const key = header || "";
			entry[key] = values[index] || "";
		});

		result.push(entry);
	}

	return result;
}

const regularData = parseCSV(birthProbsCSV);
const firstTimeData = parseCSV(firstTimeProbsCSV);
---

<div class="birth-probability-container">
	<div class="progressive-container">
		<!-- Step 1: Due Date Input (Initially visible) -->
		<div id="step-1" class="step due-date-step active">
			<div class="question-container">
				<h2>What is your due date?</h2>
				<div class="input-group">
					<input
						type="date"
						id="due-date"
						class="due-date-input"
						pattern="\d{4}-\d{2}-\d{2}"
						required
					/>
					<button id="due-date-next" class="next-button">
						<Icon name="heroicons:arrow-right" size={20} />
					</button>
				</div>
			</div>
		</div>

		<!-- Step 2: First Baby Question -->
		<div id="step-2" class="step first-baby-step">
			<div class="question-container">
				<h2>Is this your first baby?</h2>
				<div class="choice-buttons">
					<button id="first-baby-yes" class="choice-button">Yes</button>
					<button id="first-baby-no" class="choice-button">No</button>
				</div>
			</div>
		</div>

		<!-- Step 3: Chart Display -->
		<div id="step-3" class="step chart-step">
			<!-- Data summary -->
			<div class="data-summary">
				<p id="pregnancy-summary" class="summary-text">
					You are <span id="current-weeks">--</span> weeks and <span id="current-days">--</span> days
					pregnant. <span id="due-date-status">--</span>. There is a <span
						id="birth-chance-tomorrow"
						class="highlight">--</span
					> chance you will give birth by tomorrow.
				</p>
			</div>

			<!-- Editable controls above chart -->
			<div class="edit-controls">
				<div class="edit-control-group">
					<label for="edit-due-date">Due date:</label>
					<input type="date" id="edit-due-date" class="edit-due-date-input" />
				</div>
				<div class="edit-control-group">
					<label>First baby:</label>
					<div class="toggle-container">
						<button id="toggle-yes" class="toggle-button active">Yes</button>
						<button id="toggle-no" class="toggle-button">No</button>
					</div>
				</div>
			</div>

			<!-- Chart Container -->
			<div class="chart-container">
				<ProbabilityChart
					regularCsv={JSON.stringify(regularData)}
					firstTimeCsv={JSON.stringify(firstTimeData)}
				/>
			</div>
		</div>
	</div>
</div>

<style>
	.birth-probability-container {
		font-family: var(--font-sans);
		max-width: 900px;
		min-width: 100%;
		margin: 0 auto 2rem;
	}

	.progressive-container {
		position: relative;
	}

	.step {
		opacity: 0;
		height: 0;
		overflow: hidden;
		transition:
			opacity 0.5s ease-in-out,
			height 0.5s ease-in-out;
		border: 1px solid var(--color-gray-100);
		border-radius: 6px;
		background: white;
		box-shadow: var(--box-shadow-sm);
	}

	.step.active {
		opacity: 1;
		height: auto;
		overflow: visible;
	}

	.question-container {
		text-align: center;
		padding: 2rem 1rem;
	}

	.input-group {
		display: flex;
		justify-content: center;
		align-items: center;
		gap: 0.5rem;
	}

	.due-date-input,
	.edit-due-date-input {
		padding: 0.75rem 1rem;
		border: 1px solid #e5e7eb;
		border-radius: 0.375rem;
		font-size: 1rem;
		width: 200px;
	}

	.next-button {
		fill: var(--color-sea-blue);
		border: none;
		border-radius: 50%;
		width: 40px;
		height: 40px;
		display: flex;
		align-items: center;
		justify-content: center;
		cursor: pointer;
	}

	.choice-buttons {
		display: flex;
		justify-content: center;
		gap: 1rem;
	}

	.choice-button {
		background-color: #4aa3b8;
		color: white;
		border: none;
		border-radius: 0.375rem;
		padding: 0.75rem 1.5rem;
		font-size: 1rem;
		cursor: pointer;
		min-width: 100px;
		transition: background-color 0.2s;
	}

	.choice-button:hover {
		background-color: #3b8296;
	}

	.edit-controls {
		display: flex;
		justify-content: center;
		gap: 2rem;
		margin-bottom: 1.5rem;
		flex-wrap: wrap;
	}

	.edit-control-group {
		display: flex;
		align-items: center;
		gap: 0.5rem;
	}

	.toggle-container {
		display: flex;
		border-radius: 0.375rem;
		overflow: hidden;
		border: 1px solid #e5e7eb;
	}

	.toggle-button {
		background-color: #f9fafb;
		border: none;
		padding: 0.5rem 1rem;
		cursor: pointer;
		font-size: 0.875rem;
	}

	.toggle-button.active {
		background-color: #4aa3b8;
		color: white;
	}

	.chart-container {
		margin: 1rem 0 2rem;
		min-height: 400px;
	}

	.data-summary {
		padding: 1.25rem;
		margin: 1.5rem 1rem;
		text-align: center;
	}

	.summary-text {
		line-height: 1.5;
		margin: 0;
	}
</style>

<script is:inline define:vars={{ regularData, firstTimeData }}>
	// Wait for DOM to be fully loaded
	document.addEventListener("DOMContentLoaded", function () {
		// Step elements
		const step1 = document.getElementById("step-1");
		const step2 = document.getElementById("step-2");
		const step3 = document.getElementById("step-3");

		// Input elements
		const dueDateInput = document.getElementById("due-date");
		const editDueDateInput = document.getElementById("edit-due-date");
		const dueDateNextButton = document.getElementById("due-date-next");
		const firstBabyYesButton = document.getElementById("first-baby-yes");
		const firstBabyNoButton = document.getElementById("first-baby-no");
		const toggleYesButton = document.getElementById("toggle-yes");
		const toggleNoButton = document.getElementById("toggle-no");

		// Set default due date (2 weeks from today)
		const defaultDueDate = new Date();
		defaultDueDate.setDate(defaultDueDate.getDate() + 14);

		// Format for input (YYYY-MM-DD)
		const formatDateForInput = function (date) {
			const year = date.getFullYear();
			const month = String(date.getMonth() + 1).padStart(2, "0");
			const day = String(date.getDate()).padStart(2, "0");
			return `${year}-${month}-${day}`;
		};

		dueDateInput.value = formatDateForInput(defaultDueDate);
		editDueDateInput.value = formatDateForInput(defaultDueDate);

		// Due date selection and move to step 2
		dueDateNextButton?.addEventListener("click", function () {
			const dueDate = dueDateInput.value;
			if (!dueDate) return;

			// Update edit input to match
			editDueDateInput.value = dueDate;

			// Animate transition to step 2
			step1?.classList.remove("active");
			setTimeout(function () {
				step2?.classList.add("active");
			}, 500);
		});

		// First baby selection handlers
		const handleFirstBabySelection = function (isFirstBaby) {
			// Set the toggle buttons state
			if (isFirstBaby) {
				toggleYesButton?.classList.add("active");
				toggleNoButton?.classList.remove("active");
			} else {
				toggleYesButton?.classList.remove("active");
				toggleNoButton?.classList.add("active");
			}

			// Create and dispatch event with pregnancy data
			calculateAndDispatchEvent();

			// Animate transition to step 3
			step2?.classList.remove("active");
			setTimeout(function () {
				step3?.classList.add("active");
			}, 500);
		};

		firstBabyYesButton?.addEventListener("click", function () {
			handleFirstBabySelection(true);
		});

		firstBabyNoButton?.addEventListener("click", function () {
			handleFirstBabySelection(false);
		});

		// Toggle button handlers for edit controls
		toggleYesButton?.addEventListener("click", function () {
			toggleYesButton.classList.add("active");
			toggleNoButton?.classList.remove("active");
			calculateAndDispatchEvent();
		});

		toggleNoButton?.addEventListener("click", function () {
			toggleNoButton.classList.add("active");
			toggleYesButton?.classList.remove("active");
			calculateAndDispatchEvent();
		});

		// Due date edit handler
		editDueDateInput?.addEventListener("change", function () {
			calculateAndDispatchEvent();
		});

		// Function to calculate pregnancy info and dispatch event
		function calculateAndDispatchEvent() {
			const dueDate = new Date(editDueDateInput.value);
			const isFirstTimeMother = toggleYesButton?.classList.contains("active") || false;

			// Calculate pregnancy information
			const today = new Date();
			const daysInMilliseconds = 24 * 60 * 60 * 1000;
			const daysUntilDue = Math.round((dueDate.getTime() - today.getTime()) / daysInMilliseconds);
			const daysFromConception = 280 - daysUntilDue;
			const currentWeek = Math.floor(daysFromConception / 7);
			const currentDay = daysFromConception % 7;

			// Update summary elements
			updateDataSummary(currentWeek, currentDay, daysUntilDue, isFirstTimeMother);

			// Dispatch event with pregnancy information
			const event = new CustomEvent("pregnancy-data-update", {
				detail: {
					dueDate,
					currentWeek,
					currentDay,
					daysUntilDue,
					isFirstTimeMother,
				},
			});

			document.dispatchEvent(event);
		}

		// Function to update the data summary section
		function updateDataSummary(currentWeek, currentDay, daysUntilDue, isFirstTime) {
			// Update weeks and days
			const weeksElement = document.getElementById("current-weeks");
			const daysElement = document.getElementById("current-days");
			if (weeksElement) weeksElement.textContent = currentWeek.toString();
			if (daysElement) daysElement.textContent = currentDay.toString();

			// Update due date status
			const dueStatusElement = document.getElementById("due-date-status");
			if (dueStatusElement) {
				if (daysUntilDue === 0) {
					dueStatusElement.textContent = "Today is your due date";
				} else if (daysUntilDue > 0) {
					dueStatusElement.textContent = `There are ${daysUntilDue} day${daysUntilDue !== 1 ? "s" : ""} to your due date`;
				} else {
					dueStatusElement.textContent = `You are ${Math.abs(daysUntilDue)} day${Math.abs(daysUntilDue) !== 1 ? "s" : ""} past your due date`;
				}
			}

			// Calculate tomorrow's birth probability
			const birthChanceElement = document.getElementById("birth-chance-tomorrow");
			if (birthChanceElement) {
				// Get data from the appropriate dataset
				const csvDataToUse = isFirstTime ? firstTimeData : regularData;

				// Find tomorrow's data point
				const tomorrowIndex = csvDataToUse.findIndex(function (item) {
					const weekStr = item[""] || "";
					const match = weekStr.match(/(\d+)w(\d+)d/);
					if (match) {
						const week = parseInt(match[1], 10);
						const day = parseInt(match[2], 10);
						return (
							(week === currentWeek && day === currentDay + 1) ||
							(currentDay === 6 && week === currentWeek + 1 && day === 0)
						);
					}
					return false;
				});

				if (tomorrowIndex >= 0) {
					const tomorrowData = csvDataToUse[tomorrowIndex];
					const beforeThisPoint = parseFloat(
						(tomorrowData["Before This Point"] || "0").replace("%", ""),
					);
					birthChanceElement.textContent = `${beforeThisPoint.toFixed(1)}%`;
				} else {
					birthChanceElement.textContent = "unknown";
				}
			}
		}

		// Initialize with only step 1 visible
		setTimeout(function () {
			step1?.classList.add("active");
		}, 0);
	});
</script>
