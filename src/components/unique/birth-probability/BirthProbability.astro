---
import { Icon } from "astro-icon/components";
import ProbabilityChart from "./ProbabilityChart.astro";

// Import CSV data
import birthProbsCSV from "./birthprobs-multiparous.csv?raw";
import firstTimeProbsCSV from "./birthprobs-firsttime.csv?raw";

// Normalize CSV text by ensuring consistent line endings and trimming
function normalizeCSV(csvText: string): string {
	// Replace all \r\n with \n, then replace any remaining \r with \n
	return csvText.replace(/\r\n/g, "\n").replace(/\r/g, "\n").trim();
}

// Parse CSV function with robust handling of different formats
function parseCSV(csvText: string): Record<string, string>[] {
	// Normalize the CSV content first
	const normalizedCSV = normalizeCSV(csvText);

	// Split by lines, ensuring consistent line breaks
	const lines = normalizedCSV.split("\n");

	if (lines.length < 2) {
		console.error("CSV has insufficient lines:", lines);
		return [];
	}

	// Parse headers, trim each one to remove any whitespace
	const headerLine = lines[0];
	const headers = headerLine.split(",").map((h: string) => h.trim());

	// Process each data line
	const result: Record<string, string>[] = [];
	for (let i = 1; i < lines.length; i++) {
		const line = lines[i].trim();
		if (!line) continue; // Skip empty lines

		const values = line.split(",").map((v: string) => v.trim());
		const entry: Record<string, string> = {};

		// Map each value to its header
		headers.forEach((header: string, index: number) => {
			// Use the empty string as key for the first column if header is empty
			const key = header || "";
			entry[key] = values[index] || "";
		});

		result.push(entry);
	}

	return result;
}

const regularData = parseCSV(birthProbsCSV);
const firstTimeData = parseCSV(firstTimeProbsCSV);
---

<div class="birth-probability-container">
	<!-- Single sentence with both inputs on one line -->
	<div class="sentence-container">
		<span class="input-text">My due date is</span>
		<div class="date-input-wrapper">
			<input
				type="date"
				id="due-date"
				class="due-date-input"
				pattern="\d{4}-\d{2}-\d{2}"
				required
			/>
			<span class="date-display" id="date-display"></span>
			<button class="calendar-icon">
				<Icon name="heroicons:calendar" size={20} />
			</button>
		</div>
		<span class="input-text connector">and this</span>
		<div class="select-wrapper">
			<select id="first-baby-select" class="first-baby-select">
				<option value="yes">is my first child</option>
				<option value="no">is not my first child</option>
			</select>
			<Icon name="heroicons:chevron-down" size={16} class="select-icon" />
		</div>
	</div>
	<!-- Data summary -->
	<div class="data-summary">
		<p id="pregnancy-summary" class="summary-text">
			You are <span id="current-weeks">--</span> weeks and <span id="current-days">--</span> days pregnant,
			and <span id="due-date-status">--</span>. You have a <span
				id="birth-chance-tomorrow"
				class="highlight">--</span
			> chance of giving birth by tomorrow.
		</p>
	</div>

	<!-- Chart Container -->
	<div class="chart-container">
		<ProbabilityChart
			regularCsv={JSON.stringify(regularData)}
			firstTimeCsv={JSON.stringify(firstTimeData)}
		/>
	</div>
</div>

<style>
	.birth-probability-container {
		font-family: var(--font-body);
		max-width: 900px;
		min-width: 100%;
		padding: 3rem 0;
	}

	.sentence-container {
		display: flex;
		flex-wrap: wrap;
		align-items: center;
		gap: 0.5rem;
		margin-bottom: 1.5rem;
		font-size: var(--font-size-base);
	}

	.input-text {
		font-weight: 500;
	}

	.connector {
		margin: 0 0.25rem;
	}

	.date-input-wrapper {
		position: relative;
		display: inline-flex;
		align-items: center;
		border: 1px solid #e2e8f0;
		border-radius: 4px;
		padding: 0.5rem 1rem;
		background: white;
		box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
	}

	.due-date-input {
		position: absolute;
		opacity: 0;
		width: 100%;
		height: 100%;
		cursor: pointer;
		z-index: 2;
		left: 0;
		top: 0;
	}

	.date-display {
		display: inline-flex;
		align-items: center;
		font-weight: 500;
		min-width: 150px;
	}

	.calendar-icon {
		background: none;
		border: none;
		padding: 0;
		margin-left: 0.5rem;
		color: #94a3b8;
		cursor: pointer;
		display: flex;
		align-items: center;
	}

	.select-wrapper {
		position: relative;
		display: inline-flex;
		align-items: center;
		border: 1px solid #e2e8f0;
		border-radius: 4px;
		padding: 0.5rem 1rem;
		background: white;
		box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
	}

	.first-baby-select {
		-webkit-appearance: none;
		-moz-appearance: none;
		appearance: none;
		background: none;
		border: none;
		padding-right: 1.5rem;
		font-weight: 500;
		color: inherit;
		cursor: pointer;
		font-family: inherit;
		width: 100%;
	}

	.select-icon {
		position: absolute;
		right: 1rem;
		top: 50%;
		transform: translateY(-50%);
		pointer-events: none;
		color: #94a3b8;
	}

	.data-summary {
		text-align: left;
	}

	#pregnancy-summary {
		font-size: var(--font-size-lg);
	}

	.summary-text {
		line-height: 1.6;
		margin: 0;
	}

	.highlight {
		display: inline-block;
		background-color: #f3e8f3;
		color: #9a3d76;
		padding: 0 0.5rem;
		border-radius: 4px;
		font-weight: 600;
	}

	.chart-container {
		margin: 2rem 0;
		min-height: 400px;
	}

	/* Responsive adjustments for smaller screens */
	@media (max-width: 640px) {
		.sentence-container {
			gap: 0.35rem;
		}

		.date-display {
			min-width: 160px;
		}

		.connector {
			margin: 0.5rem 0;
		}
	}
</style>

<script is:inline define:vars={{ regularData, firstTimeData }}>
	// Wait for DOM to be fully loaded
	document.addEventListener("DOMContentLoaded", function () {
		// Input elements
		const dueDateInput = document.getElementById("due-date");
		const dateDisplay = document.getElementById("date-display");
		const firstBabySelect = document.getElementById("first-baby-select");

		// Set default due date (2 weeks from today)
		const defaultDueDate = new Date();
		defaultDueDate.setDate(defaultDueDate.getDate() + 14);

		// Format for input (YYYY-MM-DD)
		const formatDateForInput = function (date) {
			const year = date.getFullYear();
			const month = String(date.getMonth() + 1).padStart(2, "0");
			const day = String(date.getDate()).padStart(2, "0");
			return `${year}-${month}-${day}`;
		};

		// Format for display (Month Day, Year)
		const formatDateForDisplay = function (date) {
			return date.toLocaleDateString("en-US", {
				month: "long",
				day: "numeric",
				year: "numeric",
			});
		};

		// Initialize date input with default value
		dueDateInput.value = formatDateForInput(defaultDueDate);
		dateDisplay.textContent = formatDateForDisplay(defaultDueDate);

		// Update display when date input changes
		dueDateInput.addEventListener("change", function () {
			const selectedDate = new Date(dueDateInput.value);
			dateDisplay.textContent = formatDateForDisplay(selectedDate);
			calculateAndDispatchEvent();
		});

		// Update calculation when first baby selection changes
		firstBabySelect.addEventListener("change", function () {
			calculateAndDispatchEvent();
		});

		// Function to calculate pregnancy info and dispatch event
		function calculateAndDispatchEvent() {
			const dueDate = new Date(dueDateInput.value);
			const isFirstTimeMother = firstBabySelect.value === "yes";

			// Calculate pregnancy information
			const today = new Date();
			const daysInMilliseconds = 24 * 60 * 60 * 1000;
			const daysUntilDue = Math.round((dueDate.getTime() - today.getTime()) / daysInMilliseconds);
			const daysFromConception = 280 - daysUntilDue;
			const currentWeek = Math.floor(daysFromConception / 7);
			const currentDay = daysFromConception % 7;

			// Update summary elements
			updateDataSummary(currentWeek, currentDay, daysUntilDue, isFirstTimeMother);

			// Dispatch event with pregnancy information
			const event = new CustomEvent("pregnancy-data-update", {
				detail: {
					dueDate,
					currentWeek,
					currentDay,
					daysUntilDue,
					isFirstTimeMother,
				},
			});

			document.dispatchEvent(event);
		}

		// Function to update the data summary section
		function updateDataSummary(currentWeek, currentDay, daysUntilDue, isFirstTime) {
			// Update weeks and days
			const weeksElement = document.getElementById("current-weeks");
			const daysElement = document.getElementById("current-days");
			if (weeksElement) weeksElement.textContent = currentWeek.toString();
			if (daysElement) daysElement.textContent = currentDay.toString();

			// Update due date status
			const dueStatusElement = document.getElementById("due-date-status");
			if (dueStatusElement) {
				if (daysUntilDue === 0) {
					dueStatusElement.textContent = "today is your due date";
				} else if (daysUntilDue > 0) {
					dueStatusElement.textContent = `${daysUntilDue} day${daysUntilDue !== 1 ? "s" : ""} from your due date`;
				} else {
					dueStatusElement.textContent = `${Math.abs(daysUntilDue)} day${Math.abs(daysUntilDue) !== 1 ? "s" : ""} past your due date`;
				}
			}

			// Calculate tomorrow's birth probability
			const birthChanceElement = document.getElementById("birth-chance-tomorrow");
			if (birthChanceElement) {
				// Get data from the appropriate dataset
				const csvDataToUse = isFirstTime ? firstTimeData : regularData;

				// Find tomorrow's data point
				const tomorrowIndex = csvDataToUse.findIndex(function (item) {
					const weekStr = item[""] || "";
					const match = weekStr.match(/(\d+)w(\d+)d/);
					if (match) {
						const week = parseInt(match[1], 10);
						const day = parseInt(match[2], 10);
						return (
							(week === currentWeek && day === currentDay + 1) ||
							(currentDay === 6 && week === currentWeek + 1 && day === 0)
						);
					}
					return false;
				});

				if (tomorrowIndex >= 0) {
					const tomorrowData = csvDataToUse[tomorrowIndex];
					const beforeThisPoint = parseFloat(
						(tomorrowData["Before This Point"] || "0").replace("%", ""),
					);
					birthChanceElement.textContent = `${beforeThisPoint.toFixed(1)}%`;
				} else {
					birthChanceElement.textContent = "unknown";
				}
			}
		}

		// Initialize the calculation on page load
		calculateAndDispatchEvent();

		// Make the calendar icon work as an alternative way to open the date picker
		document.querySelector(".calendar-icon").addEventListener("click", function () {
			dueDateInput.showPicker();
		});
	});
</script>
