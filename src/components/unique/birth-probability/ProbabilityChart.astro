---
export interface Props {
	regularCsv: string;
	firstTimeCsv: string;
}

const { regularCsv, firstTimeCsv } = Astro.props;
---

<div class="probability-chart-container">
	<div class="chart-legend">
		<div class="legend-item">
			<div class="legend-color daily-color"></div>
			<div class="legend-label">Daily Birth Probability (left axis)</div>
		</div>
		<div class="legend-item">
			<div class="legend-color cumulative-color"></div>
			<div class="legend-label">Cumulative Birth Probability (right axis)</div>
		</div>
	</div>

	<div id="chart-area" class="chart-area">
		<div id="tooltip" class="tooltip"></div>
		<div id="error-message" class="error-message" style="display: none;">
			<h3>Error Loading Chart</h3>
			<p>There was an error processing the chart data. Check browser console for details.</p>
		</div>
	</div>
</div>

<style>
	.probability-chart-container {
		width: 100%;
	}

	.chart-legend {
		display: flex;
		flex-wrap: wrap;
		gap: 1.5rem;
		margin-bottom: 1rem;
		font-size: 0.875rem;
	}

	.legend-item {
		display: flex;
		align-items: center;
		gap: 0.5rem;
	}

	.legend-color {
		width: 24px;
		height: 12px;
		border-radius: 2px;
	}

	.daily-color {
		background-color: #4aa3b8;
	}

	.cumulative-color {
		background-color: #9a3d76;
	}

	.legend-label {
		color: #6b7280;
	}

	.chart-area {
		width: 100%;
		height: 400px;
		position: relative;
	}

	.tooltip {
		position: fixed;
		padding: 0.75rem 1rem;
		background-color: white;
		border: 1px solid #e5e7eb;
		border-radius: 0.375rem;
		box-shadow:
			0 4px 6px -1px rgba(0, 0, 0, 0.1),
			0 2px 4px -1px rgba(0, 0, 0, 0.06);
		pointer-events: none;
		font-size: 0.875rem;
		opacity: 0;
		transition: opacity 0.15s ease;
		z-index: 1000;
		max-width: 250px;
	}

	.tooltip-title {
		font-weight: 600;
		margin-bottom: 0.5rem;
		color: #111827;
		white-space: nowrap;
	}

	.tooltip-item {
		display: flex;
		align-items: center;
		justify-content: space-between;
		gap: 1rem;
		margin-bottom: 0.25rem;
	}

	.tooltip-label {
		color: #6b7280;
	}

	.tooltip-value {
		font-weight: 500;
		color: #111827;
	}

	.tooltip-past-note {
		font-style: italic;
		color: #94a3b8;
		font-size: 0.8rem;
		justify-content: center;
		margin-top: 0.5rem;
	}

	.current-day-line {
		stroke: #9a3d76;
		stroke-width: 2;
		stroke-dasharray: 5, 3;
	}

	.error-message {
		padding: 2rem;
		background-color: #fee2e2;
		border: 1px solid #f87171;
		border-radius: 0.5rem;
		margin: 1rem 0;
		text-align: center;
		color: #9a3d76;
	}

	.error-message h3 {
		margin-top: 0;
		margin-bottom: 0.5rem;
		font-size: 1.25rem;
		font-weight: 600;
	}

	.error-message p {
		margin: 0;
		font-size: 0.9rem;
	}
</style>

<script define:vars={{ regularCsv, firstTimeCsv }} type="module">
	// Add these helper functions for error display
	function showError(message) {
		console.error("Chart error:", message);
		const errorElement = document.getElementById("error-message");
		if (errorElement) {
			const errorParagraph = errorElement.querySelector("p");
			if (errorParagraph) {
				errorParagraph.textContent = message;
			}
			errorElement.style.display = "block";
		}
	}

	function hideError() {
		const errorElement = document.getElementById("error-message");
		if (errorElement) {
			errorElement.style.display = "none";
		}
	}

	// Get the CSV data from Astro props using define:vars
	let regularCsvData = [];
	let firstTimeCsvData = [];

	try {
		regularCsvData = JSON.parse(regularCsv || "[]");

		if (!regularCsvData.length) {
			showError("No data available in the regular dataset");
		}
	} catch (error) {
		console.error("Error parsing regularCsv:", error);
		showError("Failed to parse regular dataset: " + error.message);
	}

	try {
		firstTimeCsvData = JSON.parse(firstTimeCsv || "[]");

		if (!firstTimeCsvData.length) {
			showError("No data available in the first-time mother dataset");
		}
	} catch (error) {
		console.error("Error parsing firstTimeCsv:", error);
		showError("Failed to parse first-time mother dataset: " + error.message);
	}

	// Import D3 modules directly
	import * as d3 from "https://cdn.jsdelivr.net/npm/d3@7/+esm";

	// Define interfaces for data types
	// WeekObj, DataPoint, PregnancyData interfaces are used for organization
	// but don't affect runtime behavior

	// Create tooltip variable in the global scope
	let tooltipDiv;

	// Initialize tooltip after DOM is loaded
	document.addEventListener("DOMContentLoaded", function () {
		tooltipDiv = d3.select("#tooltip");
	});

	// Global tooltip functions that can be used across the chart
	function showTooltip(event, d, isCumulative = false) {
		if (!tooltipDiv) {
			tooltipDiv = d3.select("#tooltip");
		}

		const weekObj = parseWeek(d.week);
		const readableLabel = formatReadableLabel(weekObj);

		let statusLabel = "";
		if (d.isCurrentDay) {
			statusLabel = " (Today)";
		} else if (d.isPastDay) {
			statusLabel = " (Past)";
		}

		let html = `
		<div class="tooltip-title">${readableLabel}${statusLabel}</div>
		<div class="tooltip-item">
			<span class="tooltip-label">Birth probability:</span>
			<span class="tooltip-value" style="color: ${d.isCurrentDay ? "#ef4444" : d.isPastDay ? "#94a3b8" : "#4aa3b8"};">
				${(d.isPastDay ? d.onThisDay : d.adjustedOnThisDay !== undefined ? d.adjustedOnThisDay : d.onThisDay).toFixed(1)}%
			</span>
		</div>
	`;

		if (d.adjustedCumulative !== undefined && !d.isPastDay) {
			html += `
			<div class="tooltip-item">
				<span class="tooltip-label">Chance of birth by this day:</span>
				<span class="tooltip-value" style="color: #f97316;">${d.beforeThisPoint.toFixed(1)}%</span>
			</div>
		`;
		}

		if (d.isPastDay) {
			html += `
			<div class="tooltip-item tooltip-past-note">
				<span>This day has already passed</span>
			</div>
		`;
		}

		tooltipDiv
			.html(html)
			.style("opacity", 1)
			.style("left", `${event.clientX + 15}px`)
			.style("top", `${event.clientY + 15}px`);
	}

	function moveTooltip(event) {
		if (!tooltipDiv) {
			tooltipDiv = d3.select("#tooltip");
		}
		tooltipDiv.style("left", `${event.clientX + 15}px`).style("top", `${event.clientY + 15}px`);
	}

	function hideTooltip() {
		if (!tooltipDiv) {
			tooltipDiv = d3.select("#tooltip");
		}
		tooltipDiv.style("opacity", 0);
	}

	// Parse the string to week and day
	function parseWeek(weekString) {
		// Match the new format 36w1d
		const newFormatMatch = weekString.match(/(\d+)w(\d+)d/);
		if (newFormatMatch) {
			return {
				week: parseInt(newFormatMatch[1], 10),
				day: parseInt(newFormatMatch[2], 10),
			};
		}

		// Fallback to the old format
		const oldFormatMatch = weekString.match(/(\d+) weeks?,? (\d+) days?/i);
		if (oldFormatMatch) {
			return {
				week: parseInt(oldFormatMatch[1], 10),
				day: parseInt(oldFormatMatch[2], 10),
			};
		}

		return { week: 0, day: 0 };
	}

	// Convert weeks to days
	function weeksToDays(weeks, days) {
		return weeks * 7 + days;
	}

	// Format display label
	function formatDisplayLabel(weekObj) {
		return `${weekObj.week}w${weekObj.day}d`;
	}

	// Format readable label for tooltip
	function formatReadableLabel(weekObj) {
		return `${weekObj.week} weeks, ${weekObj.day} day${weekObj.day !== 1 ? "s" : ""}`;
	}

	// Process the data
	function processData(csvData, pregnancyData) {
		try {
			// Parse the CSV data
			const parsedData = csvData;

			// Process each data point
			const processedData = parsedData.map((item) => {
				// Get the week string from the first empty column header
				const weekString = item[""] || "";
				const weekObj = parseWeek(weekString);

				// Get values directly from the parsed data
				const beforeThisPoint = parseFloat((item["Before This Point"] || "0").replace("%", ""));
				const onThisDay = parseFloat((item["On This Day"] || "0").replace("%", ""));
				const afterThisPoint = parseFloat((item["After This Point"] || "0").replace("%", ""));

				return {
					week: weekString,
					displayLabel: formatDisplayLabel(weekObj),
					beforeThisPoint: beforeThisPoint,
					onThisDay: onThisDay,
					afterThisPoint: afterThisPoint,
					dayIndex: weeksToDays(weekObj.week, weekObj.day),
				};
			});

			// Sort by day index to ensure proper order
			processedData.sort((a, b) => a.dayIndex - b.dayIndex);

			// If pregnancy data exists, calculate adjusted probabilities
			if (pregnancyData) {
				const currentDayIndex = weeksToDays(pregnancyData.currentWeek, pregnancyData.currentDay);

				// Mark current date in the data
				processedData.forEach((d) => {
					d.isCurrentDay = d.dayIndex === currentDayIndex;
					d.isPastDay = d.dayIndex < currentDayIndex;
				});

				// Find the current day in the data (or the closest future day)
				const currentDayPoint = processedData.find((d) => d.dayIndex >= currentDayIndex);

				if (currentDayPoint) {
					// Get the remaining probability from current day
					const remainingProbability = currentDayPoint.afterThisPoint + currentDayPoint.onThisDay;

					// Calculate adjusted probabilities for all days
					processedData.forEach((d) => {
						if (d.dayIndex >= currentDayIndex) {
							// For current day and future days, use raw probabilities from CSV
							// Don't adjust the values - just use the raw data
							d.adjustedOnThisDay = d.onThisDay;
							d.adjustedCumulative = d.beforeThisPoint;
						} else {
							// For past days, keep the same approach
							d.adjustedOnThisDay = 0;
							d.adjustedCumulative = 0;
						}
					});
				}
			}
			return processedData;
		} catch (error) {
			console.error("Error processing data:", error);
			return [];
		}
	}

	// Render the chart
	function renderChart(data) {
		// Ensure we have data to render
		if (!data || data.length === 0) {
			console.error("No data available to render chart");
			return;
		}

		try {
			const chartArea = d3.select("#chart-area");
			chartArea.selectAll("*:not(#tooltip)").remove(); // Clear previous chart but keep tooltip

			// Ensure tooltip is correctly initialized if not already done
			if (!tooltipDiv) {
				tooltipDiv = d3.select("#tooltip");
			}

			// Set up dimensions
			const margin = { top: 30, right: 60, bottom: 70, left: 60 }; // Increased margins for axes
			const width = chartArea.node()?.getBoundingClientRect().width || 600;
			const height = 400 - margin.top - margin.bottom;

			// Create SVG
			const svg = chartArea
				.append("svg")
				.attr("width", width)
				.attr("height", height + margin.top + margin.bottom)
				.append("g")
				.attr("transform", `translate(${margin.left},${margin.top})`);

			// Ensure we have a valid width for the chart
			const chartWidth = width - margin.left - margin.right;
			if (chartWidth <= 0) {
				console.error("Invalid chart width:", chartWidth);
				return;
			}

			// Calculate the maximum daily probability value for dynamic y-axis scaling
			const maxDailyProbability = d3.max(data, (d) => {
				const value = d.isPastDay
					? d.onThisDay
					: d.adjustedOnThisDay !== undefined
						? d.adjustedOnThisDay
						: d.onThisDay;
				return value;
			});

			// Add one percentage point to the max value for better visualization
			// Use 6% as minimum even if all values are below 5%
			const yLeftMax = Math.max(Math.ceil(maxDailyProbability + 1), 6);

			// Set up scales
			const x = d3
				.scaleBand()
				.domain(data.map((d) => d.displayLabel))
				.range([0, chartWidth])
				.padding(0.1);

			// Left y-axis scale for daily probability (0 to dynamic max)
			const yLeft = d3.scaleLinear().domain([0, yLeftMax]).range([height, 0]);

			// Right y-axis scale for cumulative probability (0-100%)
			const yRight = d3
				.scaleLinear()
				.domain([0, 100]) // Fixed scale 0-100%
				.range([height, 0]);

			// Create axes
			const xAxis = svg
				.append("g")
				.attr("transform", `translate(0,${height})`)
				.call(
					d3.axisBottom(x).tickValues(
						data
							.filter((d) => {
								const weekObj = parseWeek(d.week);
								return weekObj.day === 0; // Show only full weeks
							})
							.map((d) => d.displayLabel),
					),
				);

			// Style x-axis
			xAxis
				.selectAll("text")
				.style("text-anchor", "end")
				.attr("dx", "-.8em")
				.attr("dy", ".15em")
				.attr("transform", "rotate(-45)");

			// Add left y-axis (daily probability)
			svg.append("g").call(
				d3
					.axisLeft(yLeft)
					.ticks(5)
					.tickFormat((d) => `${d}%`),
			);

			// Add right y-axis (cumulative probability)
			svg
				.append("g")
				.attr("transform", `translate(${chartWidth}, 0)`)
				.call(
					d3
						.axisRight(yRight)
						.ticks(5)
						.tickFormat((d) => `${d}%`),
				);

			// Add y-axis titles
			svg
				.append("text")
				.attr("transform", "rotate(-90)")
				.attr("y", -margin.left + 15)
				.attr("x", -height / 2)
				.attr("text-anchor", "middle")
				.attr("fill", "#4aa3b8")
				.style("font-size", "12px")
				.text("Daily Birth Probability (%)");

			svg
				.append("text")
				.attr("transform", "rotate(90)")
				.attr("y", -width + margin.right - 15)
				.attr("x", height / 2)
				.attr("text-anchor", "middle")
				.attr("fill", "#f97316")
				.style("font-size", "12px")
				.text("Cumulative Birth Probability (%)");

			// Add grid lines
			svg
				.append("g")
				.attr("class", "grid")
				.selectAll("line")
				.data(
					data.filter((d) => {
						const weekObj = parseWeek(d.week);
						return weekObj.day === 0; // Add grid line for each full week
					}),
				)
				.enter()
				.append("line")
				.attr("x1", (d) => x(d.displayLabel) + x.bandwidth() / 2)
				.attr("x2", (d) => x(d.displayLabel) + x.bandwidth() / 2)
				.attr("y1", 0)
				.attr("y2", height)
				.attr("stroke", "#e5e7eb")
				.attr("stroke-dasharray", "3,3");

			// Find today's date index for reference line
			const todayData = data.find((d) => d.isCurrentDay);

			// If we have today's date, add a vertical reference line
			if (todayData) {
				svg
					.append("line")
					.attr("x1", x(todayData.displayLabel) + x.bandwidth() / 2)
					.attr("x2", x(todayData.displayLabel) + x.bandwidth() / 2)
					.attr("y1", 0)
					.attr("y2", height)
					.attr("stroke", "#ef4444") // Red line
					.attr("stroke-width", 2)
					.attr("stroke-dasharray", "5,3");

				// Add "Today" label
				svg
					.append("text")
					.attr("x", x(todayData.displayLabel) + x.bandwidth() / 2)
					.attr("y", -10)
					.attr("text-anchor", "middle")
					.attr("fill", "#ef4444")
					.style("font-size", "12px")
					.style("font-weight", "bold")
					.text("Today");
			}

			// Add bars for daily probability - using left y-axis
			svg
				.selectAll(".bar")
				.data(data)
				.enter()
				.append("rect")
				.attr("class", "bar")
				.attr("x", (d) => x(d.displayLabel))
				.attr("y", (d) => {
					// For past days, use original onThisDay
					// For today and future days, use adjustedOnThisDay if available
					const value = d.isPastDay
						? d.onThisDay
						: d.adjustedOnThisDay !== undefined
							? d.adjustedOnThisDay
							: d.onThisDay;
					return yLeft(Math.min(value, yLeftMax)); // Cap at dynamic max for display
				})
				.attr("width", x.bandwidth())
				.attr("height", (d) => {
					const value = d.isPastDay
						? d.onThisDay
						: d.adjustedOnThisDay !== undefined
							? d.adjustedOnThisDay
							: d.onThisDay;
					return height - yLeft(Math.min(value, yLeftMax));
				})
				.attr("fill", (d) => {
					if (d.isCurrentDay) return "#9a3d76"; // Today's bar in red
					if (d.isPastDay) return "#94a3b8"; // Past days in gray
					return "#4aa3b8"; // Future days in blue
				})
				.on("mouseover", function (event, d) {
					showTooltip(event, d);
				})
				.on("mousemove", function (event) {
					moveTooltip(event);
				})
				.on("mouseout", hideTooltip);

			// Add line for cumulative probability - using right y-axis
			const relevantData = data.filter((d) => !d.isPastDay);

			if (relevantData.length > 0) {
				const linePath = d3
					.line()
					.curve(d3.curveMonotoneX)
					.x((d) => x(d.displayLabel) + x.bandwidth() / 2)
					.y((d) => yRight(d.beforeThisPoint));

				svg
					.append("path")
					.datum(relevantData)
					.attr("fill", "none")
					.attr("stroke", "#9a3d76")
					.attr("stroke-width", 3)
					.attr("d", linePath);

				// Add dots for each point on the line
				svg
					.selectAll(".dot")
					.data(relevantData)
					.enter()
					.append("circle")
					.attr("class", "dot")
					.attr("cx", (d) => x(d.displayLabel) + x.bandwidth() / 2)
					.attr("cy", (d) => yRight(d.beforeThisPoint))
					.attr("r", 4)
					.attr("fill", (d) => (d.isCurrentDay ? "#ef4444" : "#9a3d76"))
					.on("mouseover", function (event, d) {
						showTooltip(event, d, true);
					})
					.on("mousemove", function (event) {
						moveTooltip(event);
					})
					.on("mouseout", hideTooltip);
			}
		} catch (error) {
			console.error("Error rendering chart:", error);
		}
	}

	// Handle pregnancy data updates
	let lastPregnancyData = null;

	document.addEventListener("pregnancy-data-update", function (e) {
		const pregnancyData = e.detail;
		lastPregnancyData = pregnancyData;

		// Use the appropriate dataset based on first-time mother status
		const csvDataToUse = pregnancyData.isFirstTimeMother ? firstTimeCsvData : regularCsvData;

		// Process and render the data
		const processedData = processData(csvDataToUse, pregnancyData);
		renderChart(processedData);
	});

	// Handle window resize
	let resizeTimer;
	window.addEventListener("resize", function () {
		clearTimeout(resizeTimer);
		resizeTimer = setTimeout(function () {
			if (lastPregnancyData) {
				const csvDataToUse = lastPregnancyData.isFirstTimeMother
					? firstTimeCsvData
					: regularCsvData;
				const processedData = processData(csvDataToUse, lastPregnancyData);
				renderChart(processedData);
			} else {
				// If no pregnancy data has been set yet, still redraw with default data
				const initialData = processData(regularCsvData, null);
				renderChart(initialData);
			}
		}, 250);
	});

	// Initial render with default data - we'll skip this and rely on the calculate button
	document.addEventListener("DOMContentLoaded", function () {
		// We no longer render a default chart here
		// The DueDateInput component will automatically trigger the calculate button
	});
</script>
