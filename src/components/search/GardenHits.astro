---
import MasonryGrid from "../layouts/MasonryGrid.astro";
import EssayCard from "../cards/EssayCard.astro";
import NoteCard from "../cards/NoteCard.astro";
import PatternCard from "../cards/PatternCard.astro";
import PodcastCard from "../cards/PodcastCard.astro";
import TalkCard from "../cards/TalkCard.astro";

const { allPostData } = Astro.props;
const sortedPosts = allPostData.sort(
	(a: { updated: string }, b: { updated: string }) => {
		const dateA = new Date(a.updated).getTime();
		const dateB = new Date(b.updated).getTime();
		return dateB - dateA;
	}
);
---

<div id="hits-container">
	<MasonryGrid columnGapLeft="1rem" columnGapBottom="1rem">
		<div class="grid-sizer"></div>
		{
			sortedPosts.map(
				(
					post: {
						id: string;
						data: {
							type: string;
							cover?: string;
							title: string;
							growthStage: string;
							updated: string;
							description: string;
							url?: string;
							conferences?: {
								name: string;
								location: string;
								date: string;
							}[];
						};
					},
					i: number
				) => {
					if (!post || !post.data.type) return null;

					switch (post.data.type) {
						case "essay":
							return (
								<div class="grid-item">
									<EssayCard
										key={i}
										id={post.id}
										slug={post.id}
										cover={post.data.cover}
										title={post.data.title}
										growthStage={post.data.growthStage}
										date={post.data.updated}
										description={post.data.description}
									/>
								</div>
							);
						case "note":
							return (
								<div class="grid-item">
									<NoteCard
										key={i}
										id={post.id}
										slug={post.id}
										title={post.data.title}
										growthStage={post.data.growthStage}
										date={post.data.updated}
										description={post.data.description}
									/>
								</div>
							);
						case "pattern":
							return (
								<div class="grid-item">
									<PatternCard
										key={i}
										id={post.id}
										slug={post.id}
										title={post.data.title}
										description={post.data.description}
										date={post.data.updated}
									/>
								</div>
							);
						case "podcast":
							return (
								<div class="grid-item">
									<PodcastCard
										key={i}
										id={post.id}
										podcastName={post.data.title}
										episodeName={post.data.description}
										url={post.data.url || "#"}
										date={post.data.updated}
										podcastCover={post.data.cover}
									/>
								</div>
							);
						case "talk":
							return (
								<div class="grid-item">
									<TalkCard
										key={i}
										id={post.id}
										slug={post.id}
										title={post.data.title}
										date={post.data.updated}
										cover={post.data.cover}
										conferences={post.data.conferences || []}
									/>
								</div>
							);
						default:
							return null;
					}
				}
			)
		}
	</MasonryGrid>
</div>
