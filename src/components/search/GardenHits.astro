---
import MasonryGrid from "../layouts/MasonryGrid.astro";
import EssayCard from "../cards/EssayCard.astro";
import NoteCard from "../cards/NoteCard.astro";
import PatternCard from "../cards/PatternCard.astro";
import PodcastCard from "../cards/PodcastCard.astro";
import TalkCard from "../cards/TalkCard.astro";

interface Post {
	id: string;
	collection: string;
	data: {
		type?: string;
		updated: string;
		title?: string;
		description?: string;
		growthStage?: string;
		topics?: string[];
		cover?: string;
		podcastName?: string;
		episodeName?: string;
		url?: string;
		conferences?: string[];
		coverImage?: {
			src: string;
			width: number;
			height: number;
			format: string;
		};
	};
}

const { allPostData } = Astro.props;

const sortedPosts = allPostData.sort((a: Post, b: Post) => {
	const dateA = new Date(a.data.updated).getTime();
	const dateB = new Date(b.data.updated).getTime();
	return dateB - dateA;
});
---

<div id="hits-container">
	<MasonryGrid>
		{
			sortedPosts.map((post: Post, i: number) => {
				const isPodcast =
					post.data.type === "podcast" || post.collection === "podcasts";

				if (!post) return null;

				const commonProps = {
					key: i,
					id: post.id,
					slug: post.id,
					date: post.data.updated,
				};

				return (
					<div
						class="grid-item"
						data-type={post.data.type}
						data-growth-stage={post.data.growthStage}
						data-topics={post.data.topics?.join(",")}
					>
						{isPodcast && (
							<PodcastCard
								{...commonProps}
								podcastName={post.data.podcastName}
								episodeName={post.data.episodeName}
								url={post.data.url}
								podcastCover={post.data.coverImage}
							/>
						)}
						{post.data.type === "essay" && (
							<EssayCard
								{...commonProps}
								cover={post.data.cover}
								title={post.data.title}
								growthStage={post.data.growthStage}
								description={post.data.description}
							/>
						)}
						{post.data.type === "note" && (
							<NoteCard
								{...commonProps}
								title={post.data.title}
								growthStage={post.data.growthStage}
								description={post.data.description}
							/>
						)}
						{post.data.type === "pattern" && (
							<PatternCard
								{...commonProps}
								title={post.data.title}
								growthStage={post.data.growthStage}
								description={post.data.description}
							/>
						)}
						{post.data.type === "talk" && (
							<TalkCard
								{...commonProps}
								title={post.data.title}
								description={post.data.description}
								cover={post.data.cover}
								conferences={post.data.conferences}
							/>
						)}
					</div>
				);
			})
		}
	</MasonryGrid>
</div>

<style>
	#hits-container {
		width: 100%;
		margin: 0 auto;
	}

	.grid-item {
		transition: all 0.3s ease-out;
		transform-origin: center;
		will-change: opacity;
		break-inside: avoid;
		page-break-inside: avoid;
	}

	.grid-item.filtered-out {
		width: 0;
		height: 0;
		margin: 0;
		padding: 0;
		opacity: 0;
		pointer-events: none;
		position: absolute;
	}
</style>

<script>
	function filterGridItems(topic: string, growthStage: string, type: string) {
		const items = document.querySelectorAll<HTMLElement>(".grid-item");

		items.forEach((item) => {
			const itemTopics = item.dataset.topics?.split(",").filter(Boolean) || [];
			const itemType = item.dataset.type;
			const itemGrowthStage = item.dataset.growthStage;

			const matchesTopic = !topic || itemTopics.includes(topic);
			const matchesGrowthStage =
				!growthStage || itemGrowthStage === growthStage;
			const matchesType =
				!type ||
				itemType === type ||
				(type === "podcast" && itemType === undefined);

			const isVisible = matchesTopic && matchesGrowthStage && matchesType;
			item.classList.toggle("filtered-out", !isVisible);
		});
	}

	// Listen for filter changes
	document.addEventListener("DOMContentLoaded", () => {
		document.addEventListener("filter-change", (event: Event) => {
			const customEvent = event as CustomEvent;
			if (!customEvent.detail) return;

			const { topic, growthStage, type } = customEvent.detail;
			filterGridItems(topic, growthStage, type);
		});
	});
</script>
