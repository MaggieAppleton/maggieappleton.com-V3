---
import { Picture } from "astro:assets";
import type { ImageMetadata } from "astro";

interface Props {
	src: string | ImageMetadata;
	alt: string;
	framed?: boolean;
}

const { src, alt, framed, ...props } = Astro.props;

if (!src) {
	const message =
		"You need to pass a src attribute to a ResponsiveImage component";
	console.error(message);
	throw new Error(message);
}

// Use glob import to get all images
const images = import.meta.glob<{ default: ImageMetadata }>('/src/images/**/*');

// If src is a string and starts with "/images", try to find it in the glob
const imageSrc = typeof src === "string" && src.startsWith("/images")
	? images['/src' + src]
		? (await images['/src' + src]()).default
		: src
	: src;

const widths = [440, 800, 1100, 1300, 1800];
---

{
	framed ? (
		<figure class="container">
			<div class="image-frame">
				<Picture
					src={imageSrc}
					alt={alt}
					widths={widths}
					formats={["avif", "webp", "jpg"]}
					class="styled-image"
					{...props}
				/>
			</div>
		</figure>
	) : (
		<Picture
			src={imageSrc}
			alt={alt}
			widths={widths}
			formats={["avif", "webp", "jpg"]}
			{...props}
		/>
	)
}

<style>
	.container {
		max-width: 100%;
		grid-column: 1 / 4 !important;
		margin: var(--space-s) auto var(--space-xl);
		text-align: center;
	}

	.styled-image {
		width: 1100px;
		max-width: 100%;
		border-radius: var(--border-radius-base);
		border: 1px solid var(--color-tinted-cream);
		box-shadow: var(--box-shadow-lg);
		margin-bottom: var(--space-xs);
	}
</style>
