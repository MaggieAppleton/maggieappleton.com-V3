---
interface Props {
	src: string;
	title?: string;
	width?: string;
	height?: string;
	margin?: string;
	class?: string;
}

const { src, title, width = "1000", height = "570", margin } = Astro.props;

// Handle local video files similar to BasicImage
const videos = import.meta.glob<{ default: string }>("/src/images/**/*.{mp4,webm,mov}");

// If src is a local video path, convert it to the correct import
const videoSrc = typeof src === "string" && src.startsWith("/images") && src.match(/\.(mp4|webm|mov)$/i)
	? (await videos["/src" + src]()).default
	: src;

// Determine if this is a local video file (not a URL)
const isLocalVideo = typeof videoSrc === "string" && !videoSrc.startsWith("http") && videoSrc.match(/\.(mp4|webm|mov)$/i);
---

<div class="video" style={margin ? `margin: ${margin}` : ""}>
	{
		isLocalVideo ? (
			<video
				width={width}
				height={height}
				controls
				muted
				loop
				title={title}
			>
				<source src={videoSrc} type="video/mp4" />
				Your browser does not support the video tag.
			</video>
		) : (
			<iframe
				width={width}
				height={height}
				src={videoSrc}
				frameborder="0"
				allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
				allowfullscreen
				title={title}
			></iframe>
		)
	}
</div>

<style>
	.video {
		grid-column: 1/4 !important;
		width: 950px;
		height: 570px;
		position: relative;
		top: 0;
		left: 50%;
		transform: translateX(-50%);
		border-radius: 8px;
		overflow: hidden;
		box-shadow: var(--box-shadow-lg);
		margin: var(--space-xs) 0 var(--space-m);
	}

	@media (max-width: 950px) {
		.video {
			width: 100%;
			height: 50vw;
		}
	}

	iframe,
	video {
		left: 0;
		top: 0;
		height: 100%;
		max-width: 100%;
		position: absolute;
	}

	@media (max-width: 724px) {
		iframe,
		video {
			max-width: 100%;
		}
	}
</style>
